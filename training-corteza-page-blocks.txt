$CORTEZA_JS_PATH/src/compose/types/page-block/$COMP_NAME.ts

$CORTEZA_COMPOSE_PATH/src/components/PageBlocks/$COMP_NAME_CAP"Base.vue
$CORTEZA_COMPOSE_PATH/src/components/PageBlocks/$COMP_NAME_CAP"Configurator.vue"
$CORTEZA_COMPOSE_PATH/src/assets/PageBlocks/$COMP_NAME_CAP.png

I want to train you how a corteza low code solution blocks are developped, 
Corteza UI is composed form 3 project corteza-js, corteza-vue and compose.

The first project corteza-js provides the necessary API :
to call this apis from js code we can use some utils modules defined in cortezajs lib The complete definition of this modules can be found in the following path in the corteza repo : corteza/lib/js/src/api-clients/
- automation.ts
- compose.ts
- federation.ts
- system.ts
In the context of corteza compose components, these module are expose using a wrapper objects.
- this.$ComposeAPI for Compose api
- this.$SystemAPI for System API
- this.$FederationAPI for FederationAPI
recordList to Read records of a module we can use the recordList function with the following parameters:
- namespaceID:namespace id
- moduleID: module id
- query : String that respect the Query Language
- deleted: Exclude (0, default), include (1) or return only (2) deleted records
- incTotal: boolean ton include total count
- incPageNavigation:include page navigation
- limite: results limits
- pageCursor:page Cursor
- sort : Sort results (we can add DESC for descending sorting)
here is an example of using it:
await await this.$ComposeAPI
  .recordList({moduleID, namespaceID, query: "name like '%aname'",incTotal: true,incPageNavigation: true,limit: 100, sort: "name"
  })
  .then(({ set, filter }) => {
    console.log(set);
})
.catch(
this.toastErrorHandler(this.$t("notification:record.listLoadFailed"))
)
.finally(() => {
this.processing = false;
});




the corteza-vue project contains vuejs components that can be used in compose project ex:
export {
  CCorredorManualButtons,
} from './corredor'
export {
  CPreviewInline,
  CPreviewLightbox,
  canPreview,
} from './filePreview'
export {
  CInputConfirm,
  CInputProcessing,
  CInputDateTime,
  CInputPresort,
  CInputCron,
  CInputSearch,
  CRichTextInput,
} from './input'
export {
  CLightbox,
} from './lightbox'
export {
  CPermissionsButton,
  CPermissionsModal,
} from './permissions'
export * from './prompts'
export {
  CLoaderLogo,
} from './loader'
export {
  CTopbar,
  CSidebar,
  CSidebarNavItems,
} from './navigation'
export {
  Tour,
  TourStart,
} from './Tour'
export {
  CToaster,
  CToasterLink,
} from './toaster'
export {
  CReminderSidebar,
} from './reminders'
export {
  CItemPicker,
  CItemPickerItem,
} from './itemPicker'
export {
  CReportChart,
  CReportMetric,
  CReportTable,
  CReportText,
} from './reporter'
export {
  CSensitivityLevelPicker,
} from './privacy'
export {
  CResourceList,
} from './resourceList'
export {
  CChart,
} from './chart'
export {
  CProgress,
} from './progress'
export { default as C3 } from './c3'




The compose project uses vuejs version 2.6.14 and use bootstrap-vue version upper to 2.21.2 and depends on those package:
"dependencies": {
    "@cortezaproject/corteza-js": "^2022.9.9-rc.1",
    "@cortezaproject/corteza-vue": "^2022.9.9-rc.1",
    "@fortawesome/fontawesome-svg-core": "^1.2.21",
    "@fortawesome/free-regular-svg-icons": "^5.10.1",
    "@fortawesome/free-solid-svg-icons": "^5.10.1",
    "@fortawesome/vue-fontawesome": "^0.1.9",
    "@fullcalendar/bootstrap": "^4.3.0",
    "@fullcalendar/core": "^4.3.1",
    "@fullcalendar/daygrid": "^4.3.0",
    "@fullcalendar/list": "^4.3.0",
    "@fullcalendar/timegrid": "^4.3.0",
    "@fullcalendar/vue": "^4.3.1",
    "@nylas/components-agenda": "^1.1.7-canary.6",
    "@nylas/components-composer": "^1.1.6-canary.20",
    "@nylas/components-contact-list": "^1.1.4-canary.6",
    "@nylas/components-conversation": "^1.1.6-canary.6",
    "@nylas/components-email": "^1.1.7-canary.32",
    "@nylas/components-mailbox": "^1.1.6-canary.27",
    "@popperjs/core": "^2.4.0",
    "axios": "^0.21.2",
    "bootstrap-vue": "^2.21.2",
    "c3": "^0.7.12",
    "compact-timezone-list": "^1.0.6",
    "echarts": "^5.3.3",
    "ejs": "^3.1.7",
    "file-saver": "^2.0.2",
    "flush-promises": "^1.0.2",
    "fstream": "^1.0.12",
    "hex-rgb": "^4.1.0",
    "highlight.js": "^10.4.1",
    "html-parse-stringify": "^2.0.3",
    "i": "^0.3.7",
    "jquery": "^3.5.0",
    "js-yaml": "^3.13.1",
    "json-bigint": "^1.0.0",
    "leaflet": "^1.7.1",
    "lodash": "^4.17.19",
    "markdown-it": "^12.3.2",
    "mixin-deep": "^1.3.2",
    "moment": "2.29.2",
    "numeral": "^2.0.6",
    "portal-vue": "^2.1.7",
    "postcss-rtl": "^1.7.3",
    "prosemirror-model": "^1.11.2",
    "resolve-url-loader": "^3.1.0",
    "set-value": "^4.0.1",
    "v-tooltip": "^2.0.2",
    "vue": "2.6.14",
    "vue-echarts": "^6.2.3",
    "vue-grid-layout": "^2.3.3",
    "vue-native-websocket": "^2.0.14",
    "vue-router": "3.1.5",
    "vue-select": "^3.1.0",
    "vue-sortable-tree": "^1.2.2",
    "vue-tweet-embed": "^2.3.0",
    "vue2-brace-editor": "^2.0.2",
    "vue2-dropzone": "^3.6.0",
    "vue2-leaflet": "^2.7.1",
    "vuedraggable": "^2.23.0",
    "vuex": "^3.1.1",
    "vuex-router-sync": "^5.0.0"
  }



I will share with you some examples:
First of all you must define the type of page block type you want create,
here is an example of record list block type (file: record-list.ts) :
import { PageBlock, PageBlockInput, Registry } from './base'
import { Apply, CortezaID, NoID } from '../../../cast'
import { Compose as ComposeAPI } from '../../../api-clients'
import { Module } from '../module'
import { Button } from './types'

const kind = 'RecordList'
interface Options {
  moduleID: string;
  prefilter: string;
  presort: string;
  fields: unknown[];
  hideHeader: boolean;
  hideAddButton: boolean;
  hideImportButton: boolean;
  hideSearch: boolean;
  hidePaging: boolean;
  hideSorting: boolean;
  hideFiltering: boolean;
  hideRecordReminderButton: boolean;
  hideRecordCloneButton: boolean;
  hideRecordEditButton: boolean;
  hideRecordViewButton: boolean;
  hideRecordPermissionsButton: boolean;
  allowExport: boolean;
  perPage: number;

  fullPageNavigation: boolean;
  showTotalCount: boolean;

  // Record-lines
  editable: boolean;
  draggable?: boolean;
  positionField?: string;
  refField?: string;
  editFields?: unknown[];

  // When adding a new record, link it to parent when available
  linkToParent: boolean;

  // Should records be opened in a new tab
  openInNewTab: boolean;

  // Are table rows selectable
  selectable: boolean;
  selectMode: 'multi' | 'single' | 'range';

  // Ordered list of buttons to display in the block
  selectionButtons: Array<Button>;
}

const defaults: Readonly<Options> = Object.freeze({
  moduleID: NoID,
  prefilter: '',
  presort: '',
  fields: [],
  hideHeader: false,
  hideAddButton: false,
  hideImportButton: false,
  hideSearch: false,
  hidePaging: false,
  hideSorting: false,
  hideFiltering: false,
  hideRecordReminderButton: true,
  hideRecordCloneButton: true,
  hideRecordEditButton: false,
  hideRecordViewButton: true,
  hideRecordPermissionsButton: true,
  allowExport: false,
  perPage: 20,

  fullPageNavigation: true,
  showTotalCount: true,

  editable: false,
  draggable: false,
  positionField: undefined,
  refField: undefined,
  editFields: [],

  linkToParent: true,

  openInNewTab: false,

  selectable: true,
  selectMode: 'multi',

  selectionButtons: [],
})

export class PageBlockRecordList extends PageBlock {
  readonly kind = kind

  options: Options = { ...defaults }

  constructor (i?: PageBlockInput) {
    super(i)
    this.applyOptions(i?.options as Partial<Options>)
  }

  applyOptions (o?: Partial<Options>): void {
    if (!o) return

    Apply(this.options, o, CortezaID, 'moduleID')
    Apply(this.options, o, String, 'prefilter', 'presort', 'selectMode', 'positionField', 'refField')
    Apply(this.options, o, Number, 'perPage')

    if (o.fields) {
      this.options.fields = o.fields
    }

    if (o.editFields) {
      this.options.editFields = o.editFields
    }

    Apply(this.options, o, Boolean,
      'hideHeader',
      'hideAddButton',
      'hideImportButton',
      'hideSearch',
      'hidePaging',
      'hideFiltering',
      'fullPageNavigation',
      'showTotalCount',
      'hideSorting',
      'allowExport',
      'selectable',
      'hideRecordReminderButton',
      'hideRecordCloneButton',
      'hideRecordEditButton',
      'hideRecordViewButton',
      'hideRecordPermissionsButton',
      'editable',
      'draggable',
      'openInNewTab',
      'linkToParent',
    )

    if (o.selectionButtons) {
      this.options.selectionButtons = o.selectionButtons.map(b => new Button(b))
    }
  }

  async fetch (api: ComposeAPI, recordListModule: Module, filter: {[_: string]: unknown}): Promise<object> {
    if (recordListModule.moduleID !== this.options.moduleID) {
      throw Error('Module incompatible, module mismatch')
    }

    filter.moduleID = this.options.moduleID
    filter.namespaceID = recordListModule.namespaceID

    return api
      .recordList(filter)
      .then(r => {
        const { set: records, filter } = r as { filter: object; set: object[] }
        return { records, filter }
      })
  }
}

Registry.set(kind, PageBlockRecordList)





After that you define the Configurator of this page block (file: RecordListConfigurator.vue)
<template>
  <div>
    <b-tab
      data-test-id="record-list-configurator"
      :title="$t('recordList.label')"
    >
      <b-form-group
        class="form-group"
        :label="$t('general.module')"
      >
        <b-form-select
          v-model="options.moduleID"
          :options="moduleOptions"
          text-field="name"
          value-field="moduleID"
          required
        />
        <b-form-text class="text-secondary small">
          <i18next
            path="recordList.moduleFootnote"
            tag="label"
          >
            <router-link :to="{ name: 'admin.pages'}">
              {{ $t('recordList.recordPage') }}
            </router-link>
          </i18next>
        </b-form-text>
      </b-form-group>

      <b-form-group
        v-if="recordListModule"
        :label="$t('module:general.fields')"
        label-class="pb-0"
      >
        <label class="text-secondary small pb-1">
          {{ $t('recordList.moduleFieldsFootnote') }}
        </label>

        <field-picker
          :module="recordListModule"
          :fields.sync="options.fields"
          style="max-height: 40vh;"
        />
      </b-form-group>

      <b-form-group
        v-if="recordListModule"
        horizontal
        :label-cols="3"
        breakpoint="md"
      >
        <b-form-checkbox
          v-model="options.editable"
          :disabled="disableInlineEditor"
        >
          {{ $t('recordList.record.inlineEditorAllow') }}
        </b-form-checkbox>
      </b-form-group>

      <div
        v-if="options.editable"
      >
        <b-form-group
          v-if="recordListModule && options.editable"
          :label="$t('recordList.editFields')"
          label-size="lg"
          class="mb-0"
        >
          <field-picker
            :module="recordListModule"
            :fields.sync="options.editFields"
            :field-subset="options.fields"
            disable-system-fields
            style="max-height: 40vh;"
          />
        </b-form-group>

        <b-form-group
          horizontal
          :label-cols="3"
          breakpoint="md"
          :label="$t('recordList.refField.label')"
        >
          <b-form-select
            v-model="options.refField"
            required
          >
            <option :value="undefined">
              {{ $t('general.label.none') }}
            </option>
            <option
              v-for="field in parentFields"
              :key="field.fieldID"
              :value="field.name"
            >
              {{ field.name }}
            </option>
          </b-form-select>
          <b-form-text class="text-secondary small">
            {{ $t('recordList.refField.footnote') }}
          </b-form-text>
        </b-form-group>

        <b-form-group
          horizontal
          :label-cols="3"
          breakpoint="md"
          :label="$t('recordList.positionField.label')"
        >
          <b-form-select v-model="options.positionField">
            <option :value="undefined">
              {{ $t('general.label.none') }}
            </option>
            <option
              v-for="field in positionFields"
              :key="field.fieldID"
              :value="field.name"
            >
              {{ field.label || field.name }}
            </option>
          </b-form-select>
          <b-form-text class="text-secondary small">
            {{ $t('recordList.positionField.footnote') }}
          </b-form-text>
        </b-form-group>

        <b-form-group
          v-if="options.positionField"
          horizontal
          :label-cols="3"
          breakpoint="md"
        >
          <b-form-checkbox v-model="options.draggable">
            {{ $t('recordList.record.draggable') }}
          </b-form-checkbox>
        </b-form-group>
      </div>

      <b-form-group
        horizontal
        :label-cols="3"
        breakpoint="md"
        :label="$t('recordList.record.newLabel')"
      >
        <b-form-checkbox v-model="options.hideAddButton">
          {{ $t('recordList.record.hideAddButton') }}
        </b-form-checkbox>
        <b-form-checkbox v-model="options.hideImportButton">
          {{ $t('recordList.record.hideImportButton') }}
        </b-form-checkbox>
        <b-form-checkbox
          v-if="onRecordPage"
          v-model="options.linkToParent"
        >
          {{ $t('recordList.record.linkToParent') }}
        </b-form-checkbox>
      </b-form-group>

      <b-form-group
        horizontal
        :label-cols="3"
        breakpoint="md"
        :label="$t('recordList.record.prefilterLabel')"
      >
        <b-form-textarea
          v-model="options.prefilter"
          :placeholder="$t('recordList.record.prefilterPlaceholder')"
        />
        <b-form-text>
          <i18next
            path="recordList.record.prefilterFootnote"
            tag="label"
          >
            <code>${recordID}</code>
            <code>${ownerID}</code>
            <code>${userID}</code>
          </i18next>
        </b-form-text>
        <b-form-checkbox v-model="options.hideSearch">
          {{ $t('recordList.record.prefilterHideSearch') }}
        </b-form-checkbox>
        <b-form-checkbox v-model="options.hideFiltering">
          {{ $t('recordList.record.filterHide') }}
        </b-form-checkbox>
      </b-form-group>

      <b-form-group
        v-if="!options.positionField"
        horizontal
        :label-cols="3"
        breakpoint="md"
        :label="$t('recordList.record.presortLabel')"
      >
        <c-input-presort
          v-model="options.presort"
          :fields="recordListModuleFields"
          :labels="{
            add: $t('general:label.add'),
            ascending: $t('general:label.ascending'),
            descending: $t('general:label.descending'),
            none: $t('general:label.none'),
            placeholder: $t('recordList.record.presortPlaceholder'),
            footnote: $t('recordList.record.presortFootnote'),
            toggleInput: $t('recordList.record.presortToggleInput'),
          }"
          allow-text-input
          class="mb-2"
        />
        <b-form-checkbox v-model="options.hideSorting">
          {{ $t('recordList.record.presortHideSort') }}
        </b-form-checkbox>
      </b-form-group>

      <b-form-group
        v-if="!options.editable"
        horizontal
        :label-cols="3"
        breakpoint="md"
        :label="$t('recordList.record.perPage')"
      >
        <b-form-input
          v-model.number="options.perPage"
          data-test-id="input-records-per-page"
          type="number"
          class="mb-2"
        />
        <b-form-checkbox
          v-model="options.hidePaging"
          data-test-id="hide-pagination"
        >
          {{ $t('recordList.record.hidePaging') }}
        </b-form-checkbox>
        <b-form-checkbox
          v-if="!options.hidePaging"
          v-model="options.fullPageNavigation"
          data-test-id="hide-page-navigation"
        >
          {{ $t('recordList.record.fullPageNavigation') }}
        </b-form-checkbox>
        <b-form-checkbox
          v-if="!options.hidePaging"
          v-model="options.showTotalCount"
          data-test-id="show-total-record-count"
        >
          {{ $t('recordList.record.showTotalCount') }}
        </b-form-checkbox>
      </b-form-group>

      <b-form-group
        horizontal
        :label-cols="3"
        breakpoint="md"
        class="mt-4"
      >
        <b-form-checkbox v-model="options.allowExport">
          {{ $t('recordList.export.allow') }}
        </b-form-checkbox>
      </b-form-group>
      <b-form-group
        horizontal
        :label-cols="3"
        breakpoint="md"
        class="mt-4"
      >
        <b-form-checkbox v-model="options.selectable">
          {{ $t('recordList.selectable') }}
        </b-form-checkbox>
        <b-form-checkbox
          v-model="options.openInNewTab"
        >
          {{ $t('recordList.record.openInNewTab') }}
        </b-form-checkbox>
      </b-form-group>
      <b-form-group
        horizontal
        :label-cols="3"
        breakpoint="md"
        class="mt-4"
      >
        <b-form-checkbox v-model="options.hideRecordReminderButton">
          {{ $t('recordList.hideRecordReminderButton') }}
        </b-form-checkbox>
        <b-form-checkbox v-model="options.hideRecordCloneButton">
          {{ $t('recordList.hideRecordCloneButton') }}
        </b-form-checkbox>
        <b-form-checkbox
          v-model="options.hideRecordEditButton"
        >
          {{ $t('recordList.hideRecordEditButton') }}
        </b-form-checkbox>
        <b-form-checkbox
          v-model="options.hideRecordViewButton"
        >
          {{ $t('recordList.hideRecordViewButton') }}
        </b-form-checkbox>
        <b-form-checkbox
          v-model="options.hideRecordPermissionsButton"
        >
          {{ $t('recordList.hideRecordPermissionsButton') }}
        </b-form-checkbox>
      </b-form-group>
    </b-tab>

    <automation-tab
      v-bind="$props"
      :module="recordListModule"
      :buttons.sync="options.selectionButtons"
    />
  </div>
</template>





always the file: RecordListConfigurator.vue 
<script>
import { mapGetters } from 'vuex'
import { NoID } from '@cortezaproject/corteza-js'
import base from './base'
import AutomationTab from './Shared/AutomationTab'
import FieldPicker from 'corteza-webapp-compose/src/components/Common/FieldPicker'
import { components } from '@cortezaproject/corteza-vue'
const { CInputPresort } = components

export default {
  i18nOptions: {
    namespaces: 'block',
  },

  name: 'RecordList',

  components: {
    AutomationTab,
    FieldPicker,
    CInputPresort,
  },

  extends: base,

  computed: {
    ...mapGetters({
      getModuleByID: 'module/getByID',
      modules: 'module/set',
      pages: 'page/set',
    }),

    moduleOptions () {
      return [
        { moduleID: NoID, name: this.$t('general.label.none') },
        ...this.modules,
      ]
    },

    recordListModule () {
      if (this.options.moduleID !== NoID) {
        return this.getModuleByID(this.options.moduleID)
      } else {
        return undefined
      }
    },

    recordListModuleFields () {
      if (this.recordListModule) {
        return [
          ...this.recordListModule.fields,
          ...this.recordListModule.systemFields().map(sf => {
            sf.label = this.$t(`field:system.${sf.name}`)
            return sf
          }),
        ].map(({ name, label }) => ({ name, label }))
      }

      return []
    },

    onRecordPage () {
      return this.page && this.page.moduleID !== NoID
    },

    recordListModuleRecordPage () {
      // Relying on pages having unique moduleID,
      if (this.options.moduleID !== NoID) {
        return this.pages.find(p => p.moduleID === this.options.moduleID)
      } else {
        return undefined
      }
    },

    parentFields () {
      if (this.recordListModule) {
        return this.recordListModule.fields.filter(({ kind, isMulti, options }) => {
          if (kind === 'Record' && !isMulti && this.record) {
            return options.moduleID === this.record.moduleID
          }
        })
      }
      return []
    },

    positionFields () {
      if (this.recordListModule) {
        return this.recordListModule.fields.filter(({ kind, isMulti }) => kind === 'Number' && !isMulti)
      }
      return []
    },

    /*
     Inline record editor is disabled if:
      - An inline record editor for the same module already exists
      - Record list module doesn't have record page (inline record autoselected and disabled)
    */
    disableInlineEditor () {
      const thisModuleID = this.options.moduleID

      // Finds another inline editor block with the same recordListModulea as this one
      const otherInlineWithSameModule = !!this.page.blocks.find(({ kind, options }, index) => {
        if (this.blockIndex !== index) {
          return kind === 'RecordList' && options.editable && options.moduleID === thisModuleID
        }
      })

      return otherInlineWithSameModule || !this.recordListModuleRecordPage
    },
  },

  watch: {
    'options.moduleID' (newModuleID) {
      // Every time moduleID changes
      this.options.fields = []
      this.options.editable = false

      // If recordListModule doesn't have record page, auto check inline record editor
      if (newModuleID !== NoID) {
        if (!this.recordListModuleRecordPage) {
          this.options.editable = true
        }
      }
    },

    'options.editable' (value) {
      this.options.editFields = []
      this.options.positionField = undefined

      if (value) {
        this.options.hideRecordEditButton = true
        this.options.hideRecordViewButton = true
        this.options.hidePaging = true
        let f = null
        if (this.module && this.module.moduleID) f = this.recordListModule.fields.find(({ options: { moduleID } }) => moduleID === this.module.moduleID)
        this.options.refField = f ? f.name : undefined
      } else {
        this.options.refField = undefined
      }
    },

    'options.positionField' (v) {
      if (!v) {
        this.options.draggable = false
      }

      this.options.hideSorting = true
      this.options.presort = ''
    },

    'options.fields' (fields) {
      this.options.editFields = this.options.editFields.filter(a => fields.some(b => a.name === b.name))
    },
  },
}
</script>








After that you define your base block page (file: RecordListBase.vue) the file is too long so I will give you its sections concecutivly:
<template>
  <wrap
    v-if="recordListModule"
    v-bind="$props"
    :scrollable-body="false"
    v-on="$listeners"
  >
    <template
      v-if="showHeader"
      #header
    >
      <h5
        class="d-flex align-items-center text-truncate mb-0"
      >
        {{ block.title }}
        <b-badge
          v-if="isFederated"
          variant="primary"
          class="d-inline-block mb-0 ml-2"
        >
          {{ $t('recordList.federated') }}
        </b-badge>
      </h5>

      <b-card-text
        v-if="block.description"
        class="text-dark text-truncate mt-1"
      >
        {{ block.description }}
      </b-card-text>
    </template>

    <template #toolbar>
      <b-container
        ref="toolbar"
        class="py-2 d-print-none"
        fluid
      >
        <b-row
          no-gutters
          class="justify-content-between wrap-with-vertical-gutters"
        >
          <div class="text-nowrap flex-grow-1">
            <div
              class="wrap-with-vertical-gutters"
            >
              <template v-if="recordListModule.canCreateRecord">
                <template v-if="inlineEditing">
                  <b-btn
                    v-if="!options.hideAddButton"
                    data-test-id="button-add-record"
                    variant="primary"
                    size="lg"
                    class="float-left mr-1"
                    @click="addInline"
                  >
                    + {{ $t('recordList.addRecord') }}
                  </b-btn>
                </template>

                <template v-else-if="!inlineEditing && (recordPageID || options.allRecords)">
                  <router-link
                    v-if="!options.hideAddButton"
                    data-test-id="button-add-record"
                    class="btn btn-lg btn-primary float-left mr-1"
                    :to="newRecordRoute"
                  >
                    + {{ $t('recordList.addRecord') }}
                  </router-link>
                  <importer-modal
                    v-if="!options.hideImportButton"
                    :module="recordListModule"
                    :namespace="namespace"
                    class="mr-1 float-left"
                    @importSuccessful="onImportSuccessful"
                  />
                </template>
              </template>

              <exporter-modal
                v-if="options.allowExport && !inlineEditing"
                :module="recordListModule"
                :record-count="pagination.count"
                :query="query"
                :prefilter="prefilter"
                :selection="selected"
                :processing="processing"
                class="mr-1 float-left"
                @export="onExport"
              />

              <column-picker
                v-if="options.allRecords"
                :module="recordListModule"
                :fields="fields"
                class="float-left"
                @updateFields="onUpdateFields"
              />
            </div>
          </div>







Next section in the file: RecordListBase.vue
          <div
            v-if="!options.hideSearch && !inlineEditing"
            class="flex-grow-1 w-25"
          >
            <c-input-search
              v-model.trim="query"
              :placeholder="$t('general.label.search')"
            />
          </div>
        </b-row>
        <b-row
          v-if="options.selectable"
          v-show="selected.length > 0"
          class="mt-2 no-gutters"
        >
          <b-col
            cols="4"
            class="pt-1 text-nowrap font-weight-bold"
          >
            {{ $t('recordList.selected', { count: selected.length, total: items.length }) }}
            <a
              href="#"
              @click.prevent="handleSelectAllOnPage({ isChecked: false })"
            >
              ({{ $t('recordList.cancelSelection') }})
            </a>
          </b-col>
          <b-col
            class="text-right"
            cols="8"
          >
            <automation-buttons
              class="d-inline m-0"
              :buttons="options.selectionButtons"
              :module="recordListModule"
              :extra-event-args="{ selected, filter }"
              v-bind="$props"
              @refresh="refresh()"
            />
            <span v-if="canDeleteSelectedRecords">
              <c-input-confirm
                v-if="!inlineEditing"
                class="ml-2"
                variant="link-light"
                @confirmed="handleDeleteSelectedRecords()"
              />
              <b-button
                v-else-if="!areAllRowsDeleted"
                variant="link"
                size="md"
                @click.prevent="handleDeleteSelectedRecords()"
              >
                <font-awesome-icon
                  class="text-danger"
                  :icon="['far', 'trash-alt']"
                />
              </b-button>
              <b-button
                v-else
                variant="link"
                size="md"
                class="text-danger"
                @click.prevent="handleRestoreSelectedRecords()"
              >
                <font-awesome-icon
                  :icon="['fa', 'trash-restore']"
                />
              </b-button>
            </span>
          </b-col>
        </b-row>
      </b-container>
    </template>

    <template #default>
      <div
        class="d-flex position-relative h-100"
        :class="{ 'overflow-hidden': !items.length || processing }"
      >
        <b-table-simple
          data-test-id="table-record-list"
          hover
          responsive
          sticky-header
          class="border-top mh-100 h-100 mb-0"
        >
          <b-thead>
            <b-tr>
              <b-th v-if="options.draggable && inlineEditing" />

              <b-th
                v-if="options.selectable"
                style="width: 0%;"
                class="d-print-none"
              >
                <b-checkbox
                  :disabled="disableSelectAll"
                  :checked="areAllRowsSelected && !disableSelectAll"
                  class="ml-1"
                  @change="handleSelectAllOnPage({ isChecked: $event })"
                />
              </b-th>

              <b-th v-if="isFederated" />

              <b-th
                v-for="field in fields"
                :key="field.key"
                sticky-column
                class="pr-0"
                :style="{
                  cursor: field.sortable ? 'pointer' : 'default',
                }"
                @click="handleSort(field)"
              >
                <div
                  class="d-flex align-self-center"
                >
                  <div
                    :class="{ required: field.required }"
                    class="d-flex align-self-center text-nowrap"
                  >
                    {{ field.label }}
                  </div>
                  <div
                    class="d-flex"
                  >
                    <record-list-filter
                      v-if="!options.hideFiltering && field.filterable"
                      class="d-print-none"
                      :target="block.blockID"
                      :selected-field="field.moduleField"
                      :namespace="namespace"
                      :module="recordListModule"
                      :record-list-filter="recordListFilter"
                      @filter="onFilter"
                    />
                    <b-button
                      v-if="field.sortable"
                      variant="link p-0 ml-1"
                      :title="$t('recordList.sort.tooltip')"
                      class="d-flex align-items-center justify-content-center"
                    >
                      <font-awesome-layers
                        class="d-print-none"
                      >
                        <font-awesome-icon
                          :icon="['fas', 'angle-up']"
                          class="mb-1"
                          :style="{
                            color: 'gray',
                            ...sorterStyle(field, 'ASC'),
                          }"
                        />
                        <font-awesome-icon
                          :icon="['fas', 'angle-down']"
                          class="mt-1"
                          :style="{
                            color: 'gray',
                            ...sorterStyle(field, 'DESC'),
                          }"
                        />
                      </font-awesome-layers>
                    </b-button>
                  </div>
                </div>
              </b-th>

              <b-th />
            </b-tr>
          </b-thead>






Next section in the file: RecordListBase.vue
          <draggable
            v-if="items.length && !processing"
            v-model="items"
            :disabled="!inlineEditing || !options.draggable"
            group="items"
            tag="b-tbody"
            handle=".handle"
          >
            <b-tr
              v-for="(item, index) in items"
              :key="`${index}${item.r.recordID}`"
              :variant="!!item.r.deletedAt ? 'danger' : undefined"
              :class="{ 'pointer': !(options.editable && editing) }"
              @click="handleRowClicked(item)"
            >
              <b-td
                v-if="options.draggable && inlineEditing"
                class="align-middle pr-0"
                @click.stop
              >
                <font-awesome-icon
                  v-b-tooltip.hover
                  :icon="['fas', 'bars']"
                  :title="$t('general.tooltip.dragAndDrop')"
                  class="handle text-light"
                />
              </b-td>

              <b-td
                v-if="options.selectable"
                class="align-middle pr-0 d-print-none"
                @click.stop
              >
                <b-form-checkbox
                  class="ml-1"
                  :checked="selected.includes(item.id)"
                  @change="onSelectRow($event, item)"
                />
              </b-td>

              <b-td
                v-if="isFederated"
                class="align-middle pl-0"
              >
                <b-badge
                  v-if="Object.keys(item.r.labels || {}).includes('federation')"
                  variant="primary"
                  class="align-text-top"
                >
                  F
                </b-badge>
              </b-td>

              <b-td
                v-for="field in fields"
                :key="field.key"
              >
                <field-editor
                  v-if="field.moduleField.canUpdateRecordValue && field.editable"
                  :field="field.moduleField"
                  value-only
                  :record="item.r"
                  :module="module"
                  :namespace="namespace"
                  :errors="recordErrors(item, field)"
                  class="mb-0"
                  style="min-width: 150px;"
                  @click.stop
                />
                <div
                  v-else-if="field.moduleField.canReadRecordValue && !field.edit"
                  class="mb-0"
                  :class="{
                    'field-adjust-offset': inlineEditing,
                  }"
                >
                  <field-viewer
                    :field="field.moduleField"
                    value-only
                    :record="item.r"
                    :module="module"
                    :namespace="namespace"
                  />
                </div>
                <i
                  v-else
                  class="text-primary"
                >
                  {{ $t('field.noPermission') }}
                </i>
              </b-td>

              <b-td
                class="text-right"
                @click.stop
              >
                <b-button-group v-if="inlineEditing">
                  <b-button
                    v-if="showCloneRecordButton"
                    :title="$t('recordList.record.tooltip.clone')"
                    variant="outline-light"
                    class="text-primary d-print-none border-0"
                    @click="handleCloneInline(item.r)"
                  >
                    <font-awesome-icon
                      :icon="['far', 'clone']"
                    />
                  </b-button>

                  <b-button
                    v-if="item.r.deletedAt"
                    :title="$t('recordList.record.tooltip.undelete')"
                    variant="outline-light"
                    class="border-0 text-dark d-print-none"
                    @click.prevent="handleRestoreInline(item, index)"
                  >
                    <font-awesome-icon
                      :icon="['fa', 'trash-restore']"
                    />
                  </b-button>

                  <!-- The user should be able to delete the record if it's not yet saved -->
                  <b-button
                    v-else-if="(item.r.canDeleteRecord || item.r.recordID === '0') && !item.r.deletedAt"
                    variant="outline-light"
                    class="border-0 show-when-hovered text-danger d-print-none"
                    @click.prevent="handleDeleteInline(item, index)"
                  >
                    <font-awesome-icon
                      :icon="['far', 'trash-alt']"
                    />
                  </b-button>
                </b-button-group>







Next section in the file: RecordListBase.vue
                <b-button-group v-if="!inlineEditing">
                  <b-button
                    v-if="!options.hideRecordViewButton && item.r.canReadRecord && (options.rowViewUrl || recordPageID)"
                    :title="$t('recordList.record.tooltip.view')"
                    variant="outline-light"
                    class="text-primary d-print-none border-0"
                    :to="{ name: options.rowViewUrl || 'page.record', params: { pageID: recordPageID, recordID: item.r.recordID }, query: null }"
                  >
                    <font-awesome-icon
                      :icon="['far', 'eye']"
                    />
                  </b-button>

                  <b-button
                    v-if="!options.hideRecordEditButton && item.r.canUpdateRecord && (options.rowEditUrl || recordPageID)"
                    :title="$t('recordList.record.tooltip.edit')"
                    :to="{ name: options.rowEditUrl || 'page.record.edit', params: { pageID: recordPageID, recordID: item.r.recordID }, query: null }"
                    variant="outline-light"
                    class="text-primary d-print-none border-0"
                  >
                    <font-awesome-icon
                      :icon="['far', 'edit']"
                    />
                  </b-button>

                  <b-button
                    v-if="showCloneRecordButton"
                    :title="$t('recordList.record.tooltip.clone')"
                    variant="outline-light"
                    :to="{ name: options.rowCreateUrl || 'page.record.create', params: { pageID: recordPageID, values: item.r.values }, query: null }"
                    class="text-primary d-print-none border-0"
                  >
                    <font-awesome-icon
                      :icon="['far', 'clone']"
                    />
                  </b-button>

                  <b-button
                    v-if="!options.hideRecordReminderButton"
                    :title="$t('recordList.record.tooltip.reminder')"
                    variant="outline-light"
                    class="text-primary d-print-none border-0"
                    @click.prevent="createReminder(item.r)"
                  >
                    <font-awesome-icon
                      :icon="['far', 'bell']"
                    />
                  </b-button>

                  <c-permissions-button
                    v-if="item.r.canGrant && !options.hideRecordPermissionsButton"
                    :resource="`corteza::compose:record/${item.r.namespaceID}/${item.r.moduleID}/${item.r.recordID}`"
                    :target="item.r.recordID"
                    :title="item.r.recordID"
                    :tooltip="$t('permissions:resources.compose.record.tooltip')"
                    button-variant="outline-light"
                    class="text-dark d-print-none border-0"
                  />
                </b-button-group>
              </b-td>
            </b-tr>
          </draggable>









Next section in the file: RecordListBase.vue
          <div
            v-else
            class="position-absolute text-center mt-5 d-print-none"
            style="left: 0; right: 0;"
          >
            <b-spinner
              v-if="processing"
            />

            <p
              v-else-if="!items.length"
              class="mb-0 mx-2"
            >
              {{ $t('recordList.noRecords') }}
            </p>
          </div>
        </b-table-simple>
      </div>
    </template>

    <template
      v-if="showFooter"
      #footer
    >
      <b-container
        ref="footer"
        fluid
        class="m-0 p-2"
      >
        <b-row no-gutters>
          <b-col class="d-flex justify-content-between align-items-center">
            <div class="text-truncate">
              <div
                v-if="options.showTotalCount"
                class="ml-2 text-nowrap"
              >
                <span
                  v-if="pagination.count > options.perPage"
                  data-test-id="pagination-range"
                >
                  {{ $t('recordList.pagination.showing', getPagination) }}
                </span>
                <span
                  v-else
                  data-test-id="pagination-single-number"
                >
                  {{ $t('recordList.pagination.single', getPagination) }}
                </span>
              </div>
            </div>
            <div
              v-if="showPageNavigation"
            >
              <b-pagination
                v-if="options.fullPageNavigation"
                data-test-id="pagination"
                align="right"
                aria-controls="record-list"
                class="m-0 d-print-none"
                pills
                :value="getPagination.page"
                :per-page="getPagination.perPage"
                :total-rows="getPagination.count"
                @change="goToPage"
              >
                <template #first-text>
                  <font-awesome-icon :icon="['fas', 'angle-double-left']" />
                </template>
                <template #prev-text>
                  <font-awesome-icon :icon="['fas', 'angle-left']" />
                </template>
                <template #next-text>
                  <font-awesome-icon :icon="['fas', 'angle-right']" />
                </template>
                <template #last-text>
                  <font-awesome-icon :icon="['fas', 'angle-double-right']" />
                </template>
                <template #elipsis-text>
                  <font-awesome-icon :icon="['fas', 'ellipsis-h']" />
                </template>
              </b-pagination>

              <b-button-group v-else>
                <b-button
                  :disabled="!hasPrevPage"
                  data-test-id="first-page"
                  variant="outline-light"
                  class="d-flex align-items-center justify-content-center text-primary border-0"
                  @click="goToPage()"
                >
                  <font-awesome-icon :icon="['fas', 'angle-double-left']" />
                </b-button>
                <b-button
                  :disabled="!hasPrevPage"
                  data-test-id="previous-page"
                  variant="outline-light"
                  class="d-flex align-items-center justify-content-center text-primary border-0"
                  @click="goToPage('prevPage')"
                >
                  <font-awesome-icon
                    :icon="['fas', 'angle-left']"
                    class="mr-1"
                  />
                  {{ $t('recordList.pagination.prev') }}
                </b-button>
                <b-button
                  :disabled="!hasNextPage"
                  data-test-id="next-page"
                  variant="outline-light"
                  class="d-flex align-items-center justify-content-center text-primary border-0"
                  @click="goToPage('nextPage')"
                >
                  {{ $t('recordList.pagination.next') }}
                  <font-awesome-icon
                    :icon="['fas', 'angle-right']"
                    class="ml-1"
                  />
                </b-button>
              </b-button-group>
            </div>
          </b-col>
        </b-row>
      </b-container>
    </template>
  </wrap>
</template>









Next section in the file: RecordListBase.vue
<script>
import { debounce } from 'lodash'
import { mapGetters } from 'vuex'
import base from './base'
import FieldViewer from 'corteza-webapp-compose/src/components/ModuleFields/Viewer'
import FieldEditor from 'corteza-webapp-compose/src/components/ModuleFields/Editor'
import ExporterModal from 'corteza-webapp-compose/src/components/Public/Record/Exporter'
import ImporterModal from 'corteza-webapp-compose/src/components/Public/Record/Importer'
import AutomationButtons from './Shared/AutomationButtons'
import { compose, validator, NoID } from '@cortezaproject/corteza-js'
import users from 'corteza-webapp-compose/src/mixins/users'
import { evaluatePrefilter, queryToFilter } from 'corteza-webapp-compose/src/lib/record-filter'
import { getItem, setItem, removeItem } from 'corteza-webapp-compose/src/lib/local-storage'
import { components, url } from '@cortezaproject/corteza-vue'
import draggable from 'vuedraggable'
import RecordListFilter from 'corteza-webapp-compose/src/components/Common/RecordListFilter'
import ColumnPicker from 'corteza-webapp-compose/src/components/Admin/Module/Records/ColumnPicker'
const { CInputSearch } = components

export default {
  i18nOptions: {
    namespaces: 'block',
  },

  components: {
    ExporterModal,
    ImporterModal,
    AutomationButtons,
    FieldViewer,
    FieldEditor,
    draggable,
    RecordListFilter,
    ColumnPicker,
    CInputSearch,
  },

  extends: base,

  mixins: [
    users,
  ],

  props: {
    errors: {
      type: validator.Validated,
      required: false,
      default: () => new validator.Validated(),
    },
  },

  data () {
    return {
      uniqueID: undefined,

      processing: false,
      // prefilter from block config
      prefilter: null,

      // raw query string used to build final filter
      query: null,

      // used to construct request parameters
      // AND to store response params
      filter: {
        query: '',
        sort: '',
        limit: 10,
        pageCursor: '',
        prevPage: '',
        nextPage: '',
      },

      pagination: {
        pages: [],
        page: 1,
        count: 0,
      },

      selected: [],

      sortBy: undefined,
      sortDirecton: undefined,

      // This counter helps us generate unique ID's for the lifetime of this
      // component
      ctr: 0,
      items: [],
      idPrefix: `rl:${this.blockIndex}`,
      recordListFilter: [],
    }
  },

  computed: {
    ...mapGetters({
      getModuleByID: 'module/getByID',
      pages: 'page/set',
    }),

    loaderCollSpan () {
      // 2 for right side actions
      let base = this.fields.length + 2
      if (this.options.draggable && this.inlineEditing) base++
      if (this.options.selectable) base++
      return base
    },

    isFederated () {
      return Object.keys(this.recordListModule.labels || {}).includes('federation')
    },

    showHeader () {
      return !!(this.block.title || this.block.description || this.isFederated)
    },

    showFooter () {
      return !this.options.hidePaging && !this.inlineEditing
    },

    hasRightActions () {
      return this.editing
    },

    getPagination () {
      const { page = 1, count = 0 } = this.pagination
      const { perPage = 10 } = this.options

      return {
        from: ((page - 1) * perPage) + 1,
        to: perPage > 0 ? Math.min((page * perPage), count) : count,
        page,
        perPage,
        count,
      }
    },

    hasPrevPage () {
      return this.filter.prevPage
    },

    hasNextPage () {
      return this.filter.nextPage
    },

    editing () {
      return this.mode === 'editor'
    },

    showPageNavigation () {
      return this.items.length && !this.options.hidePaging && !this.inlineEditing
    },

    disableSelectAll () {
      if (this.options.hidePaging) {
        return !this.items.length
      }
      return this.items.length === 0
    },

    inlineEditing () {
      return !!this.options.editable && !!this.editing
    },

    /**
     * Check if all rows are selected
     */
    areAllRowsSelected () {
      return this.selected.length === this.items.length
    },

    areAllRowsDeleted () {
      const selItems = this.items.filter(({ id }) => this.selected.includes(id))
      return !!this.selected.length && !selItems.find(({ r }) => !r.deletedAt)
    },

    // Returns module, configured for this record list
    recordListModule () {
      if (this.options.moduleID) {
        return this.getModuleByID(this.options.moduleID)
      } else {
        return undefined
      }
    },

    // Tries to determine ID of the page we're supposed to redirect
    recordPageID () {
      // Relying on pages having unique moduleID,
      const { moduleID } = this.recordListModule || {}
      if (!moduleID) {
        return undefined
      }

      const { pageID } = this.pages.find(p => p.moduleID === moduleID) || {}
      if (!pageID) {
        return undefined
      }

      return pageID
    },








Next section in the file: RecordListBase.vue
    fields () {
      let fields = []

      const editable = (!this.options.editable || !this.editing)
        ? []
        : this.options.editFields.map(({ name }) => name)

      if (this.options.fields.length > 0) {
        fields = this.recordListModule.filterFields(this.options.fields)
      } else {
        // Record list block does not have any configured fields
        // Use first five fields from the module.
        fields = this.recordListModule.fields.slice(0, 5)
      }

      const configured = fields.map(mf => ({
        key: mf.name,
        label: mf.isSystem ? this.$t(`field:system.${mf.name}`) : mf.label || mf.name,
        moduleField: mf,
        sortable: !this.options.hideSorting && !(this.options.editable && this.editing) && !mf.isMulti && mf.isSortable,
        filterable: mf.isFilterable,
        tdClass: 'record-value',
        editable: !!editable.find(f => mf.name === f),
        required: this.inlineEditing && mf.isRequired,
      }))

      const pre = []
      const post = []

      return [
        ...pre,
        ...configured,
        ...post,
      ]
    },

    canDeleteSelectedRecords () {
      return this.items.filter(({ id, r }) => this.selected.includes(id) && r.canDeleteRecord).length
    },

    newRecordRoute () {
      const refRecord = this.options.linkToParent ? this.record : undefined
      const pageID = this.recordPageID

      if (pageID || this.options.rowCreateUrl) {
        return {
          name: this.options.rowCreateUrl || 'page.record.create',
          params: { pageID, refRecord },
          query: null,
        }
      }

      return undefined
    },

    showCloneRecordButton () {
      return !this.options.hideRecordCloneButton && this.recordListModule.canCreateRecord && (this.options.rowCreateUrl || this.recordPageID)
    },
  },

  watch: {
    query: debounce(function (e) {
      this.refresh(true)
    }, 500),

    options: {
      deep: true,
      handler () {
        this.prepRecordList()
        this.refresh(true)
      },
    },

    'record.recordID': {
      immediate: true,
      handler (recordID = NoID) {
        const { pageID = NoID } = this.page

        // Set uniqueID so that events dont mix
        if (this.uniqueID) {
          this.$root.$off(`record-line:collect:${this.uniqueID}`)
          this.$root.$off(`page-block:validate:${this.uniqueID}`)
          this.$root.$off(`refetch-non-record-blocks:${pageID}`)
        }

        this.uniqueID = `${pageID}-${recordID}-${this.blockIndex}`
        this.$root.$on(`record-line:collect:${this.uniqueID}`, this.resolveRecords)
        this.$root.$on(`page-block:validate:${this.uniqueID}`, this.validatePageBlock)
        this.$root.$on(`refetch-non-record-blocks:${pageID}`, () => {
          this.refresh(true)
        })

        this.getStorageRecordListFilter()
        this.prepRecordList()
        this.refresh(true)
      },
    },
  },

  beforeDestroy () {
    this.$root.$off(`record-line:collect:${this.uniqueID}`)
    this.$root.$off(`page-block:validate:${this.uniqueID}`)
    this.$root.$off(`refetch-non-record-blocks:${this.page.pageID}`)
  },

  methods: {
    onFilter (filter = []) {
      this.recordListFilter = filter
      this.setStorageRecordListFilter()
      this.refresh(true)
    },

    onUpdateFields (fields = []) {
      this.options.fields = [...fields]
      this.$emit('save-fields', this.options.fields)
    },

    onSelectRow (selected, item) {
      if (selected) {
        if (this.selected.includes(item.id)) {
          return
        }

        this.selected.push(item.id)
      } else {
        const i = this.selected.indexOf(item.id)
        if (i < 0) {
          return
        }
        this.selected.splice(i, 1)
      }
    },

    sorterStyle ({ key }, dir) {
      const { sort = '' } = this.filter

      const sortedFields = (sort.includes(',') ? sort.split(',') : [sort])

      const isSorted = sortedFields.map(v => v.trim()).some(value => {
        let valueDir = 'ASC'

        if (value.includes(' ')) {
          value = value.split(' ')[0]
          valueDir = 'DESC'
        }

        return valueDir === dir && value === key
      })

      return isSorted ? { color: 'black' } : {}
    },

    // Grabs errors specific to this record item
    recordErrors (item, field) {
      if (field) {
        return this.errors.filterByMeta('id', item.id)
          .filterByMeta('field', field.key)
      }
      return this.errors.filterByMeta('id', item.id)
    },

    wrapRecord (r, id) {
      if (r.id) {
        id = r.id
        r = r.r
      }

      return {
        r,
        id: id || (r.recordID !== NoID ? r.recordID : `${this.idPrefix}:${this.ctr++}`),
        _rowVariant: r.deletedAt ? 'danger' : undefined,
      }
    },

    addInline () {
      const r = new compose.Record(this.recordListModule, {})

      // Set record values that should be prefilled
      if (this.record.recordID && this.options.linkToParent) {
        r.values[this.options.refField] = this.record.recordID
      }

      this.items.unshift(this.wrapRecord(r))
    },

    /**
     * Helper method to fetch all records available to this record list
     * at the given point in time.
     *
     * It:
     *    * assures that local records have a sequencial indexing
     *    * appends aditional meta fields
     *    * resolves payloadediting
     */
    resolveRecords (resolve) {
      this.ctr = 0
      this.items = this.items.map(this.wrapRecord)

      resolve({
        items: this.items,
        module: this.recordListModule,
        refField: this.options.refField,
        positionField: this.options.positionField,
        idPrefix: this.idPrefix,
      })
    },

    validatePageBlock (resolve) {
      // For now, only record lines should be validated
      if (!this.options.editable) {
        resolve({ valid: true })
      }

      // Find all required fields
      const req = new Set(this.recordListModule.fields.filter(({ isRequired = false }) => isRequired).map(({ name }) => name))

      // Check if all required fields are there
      for (const f of this.options.editFields) {
        req.delete(f.name)
      }

      // If required fields are satisfied, then the validation passes
      resolve({ valid: !req.size })
    },

    handleDeleteInline (item, i) {
      if (item.r.recordID !== NoID) {
        const r = new compose.Record(this.recordListModule, { ...item.r, deletedAt: new Date() })
        this.items.splice(i, 1, this.wrapRecord(r, item.id))
      } else {
        this.items.splice(i, 1)
      }
    },

    handleRestoreInline (item, i) {
      const r = new compose.Record(this.recordListModule, { ...item.r, deletedAt: undefined })
      this.items.splice(i, 1, this.wrapRecord(r, item.id))
    },

    handleCloneInline (r) {
      r = new compose.Record(r.module, { ...r.values })
      this.items.splice(0, 0, this.wrapRecord(r))
    },











Next section in the file: RecordListBase.vue
    // Sanitizes record list config and
    // prepares prefilter
    prepRecordList () {
      const { moduleID, presort, prefilter, editable, perPage, refField, positionField } = this.options

      // Validate props
      if (!moduleID) {
        throw Error(this.$t('record.moduleOrPageNotSet'))
      }

      // If there is no current record and we are using recordID/ownerID variable in (pre)filter
      // we should disable the block
      /* eslint-disable no-template-curly-in-string */
      if (!this.record) {
        if ((prefilter || '').includes('${record')) {
          throw Error(this.$t('record.invalidRecordVar'))
        }

        if ((prefilter || '').includes('${ownerID}')) {
          throw Error(this.$t('record.invalidOwnerVar'))
        }
      }

      const filter = []
      let sort = ''

      if (presort) {
        sort = presort
      }

      // Initial filter
      if (prefilter) {
        const pf = evaluatePrefilter(prefilter, {
          record: this.record,
          recordID: (this.record || {}).recordID || NoID,
          ownerID: (this.record || {}).ownedBy || NoID,
          userID: (this.$auth.user || {}).userID || NoID,
        })
        filter.push(`(${pf})`)
      }

      if (editable) {
        if (positionField) {
          sort = `${positionField}`
        }

        if (refField && this.record.recordID) {
          filter.push(`(${refField} = ${this.record.recordID})`)
        }
      }

      this.prefilter = filter.join(' AND ')
      const limit = editable ? 0 : perPage
      this.filter = {
        limit,
        sort,
      }
    },

    createReminder (record) {
      // Determine initial reminder title
      const { recordID, values = {} } = record
      const { name, isMulti } = (this.options.fields || []).find(({ name }) => !!values[name]) || {}
      const title = isMulti ? values[name].join(', ') : values[name]

      const resource = `compose:record:${recordID}`
      const payload = {
        title,
        link: {
          name: 'page.record',
          label: 'Record page',
          params: {
            slug: this.namespace.slug || this.namespace.namespaceID,
            pageID: this.recordPageID,
            recordID: recordID,
          },
        },
      }

      this.$root.$emit('reminder.create', { payload, resource })
      this.$root.$emit('rightPanel.toggle', true)
    },

    onExport (e) {
      this.processing = true

      const { namespaceID, moduleID } = this.filter || {}
      const { filter, filterRaw, timezone } = e
      e = {
        ...e,
        namespaceID,
        moduleID,
        filename: `${this.namespace.slug || namespaceID} - ${this.recordListModule.name}`,
      }

      if (filterRaw.rangeType === 'range') {
        e.filename += ` - ${filterRaw.date.start} - ${filterRaw.date.end}`
      } else {
        e.filename += ` - ${filterRaw.rangeType}`
      }

      if (timezone) {
        e.filename += ` - ${timezone.label}`
      }

      // Make sure the generated filename won't break the URL
      e.filename = encodeURIComponent(e.filename.replace(/\./g, '-'))

      const exportUrl = url.Make({
        url: `${this.$ComposeAPI.baseURL}${this.$ComposeAPI.recordExportEndpoint(e)}`,
        query: {
          fields: e.fields,
          // url.Make already URL encodes the the values, so the filter shouldn't be encoded
          filter: filter,
          jwt: this.$auth.accessToken,
          timezone: timezone ? timezone.tzCode : undefined,
        },
      })

      window.open(exportUrl)
      this.processing = false
    },

    handleRowClicked ({ r: { recordID } }) {
      if ((this.options.editable && this.editing) || (!this.recordPageID && !this.options.rowViewUrl)) {
        return
      }

      const pageID = this.recordPageID
      const route = {
        name: this.options.rowViewUrl || 'page.record',
        params: {
          pageID,
          recordID,
        },
        query: null,
      }

      if (this.options.openInNewTab) {
        window.open(this.$router.resolve(route).href)
      } else {
        this.$router.push(route)
      }
    },

    handleSort ({ key, sortable }) {
      if (!sortable) {
        return
      }

      if (this.sortBy !== key) {
        this.filter.sort = `${key}`
        this.sortDirecton = 'ASC'
      } else {
        if (this.sortDirecton === 'ASC') {
          this.filter.sort = `${key} DESC`
          this.sortDirecton = 'DESC'
        } else {
          this.filter.sort = `${key}`
          this.sortDirecton = 'ASC'
        }
      }
      this.sortBy = key
      this.refresh(true)
    },

    goToPage (page) {
      if (page >= 1) {
        this.filter.pageCursor = (this.pagination.pages[page - 1] || {}).cursor
        this.pagination.page = page
      } else {
        this.filter.pageCursor = this.filter[page]
        if (this.filter.pageCursor) {
          this.pagination.page += page === 'nextPage' ? 1 : -1
        } else {
          this.pagination.page = 1
        }
      }
      this.refresh()
    },

    handleSelectAllOnPage ({ isChecked }) {
      if (isChecked) {
        this.selected = this.items.map(({ id }) => id)
      } else {
        this.selected = []
      }
    },

    handleRestoreSelectedRecords () {
      const sel = new Set(this.selected)
      for (let i = 0; i < this.items.length; i++) {
        if (sel.has(this.items[i].id)) {
          this.handleRestoreInline(this.items[i], i)
        }
      }
    },









Next section in the file: RecordListBase.vue
    handleDeleteSelectedRecords () {
      if (this.selected.length === 0) {
        return
      }

      if (this.inlineEditing) {
        const sel = new Set(this.selected)
        for (let i = 0; i < this.items.length; i++) {
          if (sel.has(this.items[i].id)) {
            this.handleDeleteInline(this.items[i], i)
          }
        }
      } else {
        // Pick module and namespace ID from the first record
        //
        // We are always showing list of records from the
        // same module so this should be safe to do.
        const { moduleID, namespaceID } = this.items[0].r

        // filter deletable records from the selected list
        const recordIDs = this.items
          .filter(({ id, r }) => r.canDeleteRecord && this.selected.includes(id))
          .map(({ id }) => id)

        this.processing = true

        this.$ComposeAPI
          .recordBulkDelete({ moduleID, namespaceID, recordIDs })
          .then(() => {
            this.refresh(true)
            this.toastSuccess(this.$t('notification:record.deleteBulkSuccess'))
          })
          .catch(this.toastErrorHandler(this.$t('notification:record.deleteBulkFailed')))
          .finally(() => {
            this.processing = false
          })
      }
    },

    refresh (resetPagination = false) {
      this.pullRecords(resetPagination)
    },

    /**
     * Loader for b-table
     *
     * Will ignore b-tables input arguments for filter
     * and assemble them on our own
     */
    async pullRecords (resetPagination = false) {
      if (!this.recordListModule) {
        return
      }

      if (this.recordListModule.moduleID !== this.options.moduleID) {
        throw Error(this.$t('record.moduleMismatch'))
      }

      this.processing = true
      this.selected = []

      // Compute query based on query, prefilter and recordListFilter
      const query = queryToFilter(this.query, this.prefilter, this.recordListModule.filterFields(this.options.fields), this.recordListFilter)

      const { moduleID, namespaceID } = this.recordListModule
      if (this.filter.pageCursor) {
        this.filter.sort = ''
      }

      let paginationOptions = {}
      if (resetPagination) {
        const { fullPageNavigation = false, showTotalCount = false } = this.options
        paginationOptions = {
          incPageNavigation: fullPageNavigation,
          incTotal: showTotalCount,
        }
      }

      await this.$ComposeAPI.recordList({ ...this.filter, moduleID, namespaceID, query, ...paginationOptions })
        .then(({ set, filter }) => {
          const records = set.map(r => new compose.Record(r, this.recordListModule))

          this.filter = { ...this.filter, ...filter }
          this.filter.pageCursor = undefined
          this.filter.nextPage = filter.nextPage
          this.filter.prevPage = filter.prevPage

          if (resetPagination) {
            let count = this.pagination.count || 0

            if (paginationOptions.incTotal) {
              count = filter.total || 0
              this.filter.incTotal = false
            }

            if (paginationOptions.incPageNavigation) {
              const pages = filter.pageNavigation || []
              this.pagination.pages = pages

              if (!paginationOptions.incTotal) {
                if (pages.length > 1) {
                  const lastPageCount = pages[pages.length - 1].items
                  count = ((pages.length - 1) * this.options.perPage) + lastPageCount
                } else {
                  count = records.length
                }
              }

              this.filter.incPageNavigation = false
            }

            this.pagination.count = count
            this.pagination.page = 1
          }

          // Extract user IDs from record values and load all users
          const fields = this.fields.filter(f => f.moduleField).map(f => f.moduleField)
          this.fetchUsers(fields, records)

          this.items = records.map(r => this.wrapRecord(r))
        })
        .catch(this.toastErrorHandler(this.$t('notification:record.listLoadFailed')))
        .finally(() => {
          this.processing = false
        })
    },

    getStorageRecordListFilter () {
      try {
        // Get record list filters from localStorage
        const currentFilters = getItem(`record-list-filters-${this.uniqueID}`)

        // Check type of filter value
        if (!Array.isArray(currentFilters)) {
          console.warn(this.$t('notification:record-list.incorrect-filter-structure', { filterID: this.uniqueID }))
          // Remove the filter from the local storage if the type doesn't match
          removeItem(`record-list-filters-${this.uniqueID}`)
        } else {
          this.recordListFilter = currentFilters
        }
      } catch (e) {
        // Land here if the filter is corrupted
        console.warn(this.$t('notification:record-list.corrupted-filter'))
        // Remove filter from the local storage
        removeItem(`record-list-filters-${this.uniqueID}`)
      }
    },

    setStorageRecordListFilter () {
      let currentListFilters = []

      try {
        // Get record list filters from localStorage
        currentListFilters = getItem(`record-list-filters-${this.uniqueID}`)
        currentListFilters = this.recordListFilter
        setItem(`record-list-filters-${this.uniqueID}`, currentListFilters)
      } catch (e) {
        console.warning(this.$t('notification:record-list.corrupted-filter'))
      }
    },

    onImportSuccessful () {
      this.refresh(true)
    },
  },
}
</script>

<style lang="scss" scoped>

.handle {
  cursor: grab;
}

.pointer {
  cursor: pointer;
}

th .required::after {
  content: "*";
  display: inline-block;
  color: $primary;
  vertical-align: sub;
  margin-left: 2px;
  width: 10px;
  height: 16px;
  overflow: hidden;
}
</style>









Let me give you another example for the page block "Content":
file content.ts
import { PageBlock, PageBlockInput, Registry } from './base'
import { Apply } from '../../../cast'

const kind = 'Content'

interface Options {
  body: string;
}

const defaults: Readonly<Options> = Object.freeze({
  body: '',
})

export class PageBlockContent extends PageBlock {
  readonly kind = kind

  options: Options = { ...defaults }

  constructor (i?: PageBlockInput) {
    super(i)
    this.applyOptions(i?.options as Partial<Options>)
  }

  applyOptions (o?: Partial<Options>): void {
    if (!o) return

    Apply(this.options, o, String, 'body')
  }
}

Registry.set(kind, PageBlockContent)








file ContentConfigurator.vue:
<template>
  <b-tab :title="$t('content.label')">
    <b-form-group>
      <c-rich-text-input
        v-model="options.body"
        :labels="{
          urlPlaceholder: $t('content.urlPlaceholder'),
          ok: $t('content.ok'),
          openLinkInNewTab: $t('content.openLinkInNewTab'),
        }"
      />
    </b-form-group>
  </b-tab>
</template>
<script>
import base from './base'
import { components } from '@cortezaproject/corteza-vue'
const { CRichTextInput } = components

export default {
  i18nOptions: {
    namespaces: 'block',
  },

  name: 'Content',

  components: {
    CRichTextInput,
  },

  extends: base,
}
</script>





file ContentBase.vue:
<template>
  <wrap
    v-bind="$props"
    v-on="$listeners"
  >
    <div
      class="rt-content px-3 py-2"
    >
      <p
        :style="{ 'white-space': 'pre-wrap' }"
        v-html="options.body"
      />
    </div>
  </wrap>
</template>
<script>
import base from './base'

export default {
  extends: base,
}
</script>







let me give you another example of the page block "file":
file file.js:
import { PageBlock, PageBlockInput, Registry } from './base'
import { Apply } from '../../../cast'

const kind = 'File'

interface Options {
  mode: string;
  attachments: string[];
  hideFileName: boolean;
}

const PageBlockFileDefaultMode = 'list'
const PageBlockFileModes = [
  // list of attachments, no preview
  'list',
  // grid of icons
  'grid',
  // single (first) image/file, show preview
  'single',
  // list of all images/files, show preview
  'gallery',
]

const defaults: Readonly<Options> = Object.freeze({
  mode: PageBlockFileDefaultMode,
  attachments: [],
  hideFileName: false,
})

export class PageBlockFile extends PageBlock {
  readonly kind = kind

  options: Options = { ...defaults }

  constructor (i?: PageBlockInput) {
    super(i)
    this.applyOptions(i?.options as Partial<Options>)
  }

  applyOptions (o?: Partial<Options>): void {
    if (!o) return

    if (o.attachments) {
      this.options.attachments = o.attachments
    }

    Apply(this.options, o, Boolean, 'hideFileName')

    if (o.mode) {
      if (PageBlockFileModes.includes(o.mode)) {
        this.options.mode = o.mode
      } else {
        o.mode = PageBlockFileDefaultMode
      }
    }
  }
}

Registry.set(kind, PageBlockFile)

file FileConfigurator.vue:
<template>
  <b-tab :title="$t('kind.file.label')">
    <b-form-group
      horizontal
      :description="$t('kind.file.view.modeFootnote')"
      :label="$t('kind.file.view.modeLabel')"
    >
      <b-form-radio-group
        v-model="options.mode"
        buttons
        button-variant="outline-secondary"
        size="sm"
        name="buttons2"
        :options="modes"
      />
    </b-form-group>
    <b-form-checkbox
      v-model="options.hideFileName"
      :disabled="!enableFileNameHiding"
      class="mb-3"
    >
      {{ $t('kind.file.view.showName') }}
    </b-form-checkbox>
    <uploader
      :endpoint="endpoint"
      :max-filesize="$s('compose.Page.Attachments.MaxSize', 100)"
      :accepted-files="$s('compose.Page.Attachments.Mimetypes', ['*/*'])"
      @uploaded="appendAttachment"
    />
    <list-loader
      kind="page"
      enable-delete
      :namespace="namespace"
      :set.sync="options.attachments"
      mode="list"
      class="mt-2"
    />
  </b-tab>
</template>
<script>
import base from './base'
import Uploader from 'corteza-webapp-compose/src/components/Public/Page/Attachment/Uploader'
import ListLoader from 'corteza-webapp-compose/src/components/Public/Page/Attachment/ListLoader'

export default {
  i18nOptions: {
    namespaces: 'field',
  },

  name: 'File',

  components: {
    Uploader,
    ListLoader,
  },

  extends: base,

  computed: {
    endpoint () {
      const { pageID } = this.page

      return this.$ComposeAPI.pageUploadEndpoint({
        namespaceID: this.namespace.namespaceID,
        pageID,
      })
    },

    modes () {
      return [
        { value: 'list', text: this.$t('kind.file.view.list') },
        { value: 'grid', text: this.$t('kind.file.view.grid') },
        { value: 'single', text: this.$t('kind.file.view.single') },
        { value: 'gallery', text: this.$t('kind.file.view.gallery') },
      ]
    },

    enableFileNameHiding () {
      return (this.options.mode === 'single') || (this.options.mode === 'gallery')
    },
  },

  methods: {
    appendAttachment ({ attachmentID } = {}) {
      this.options.attachments.push(attachmentID)
    },
  },
}
</script>

file FileBase.vue:
<template>
  <wrap
    v-bind="$props"
    v-on="$listeners"
  >
    <div
      class="p-2 h-100"
    >
      <list-loader
        class="h-100"
        kind="page"
        :set="options.attachments"
        :namespace="namespace"
        :mode="options.mode"
        :hide-file-name="options.hideFileName"
      />
    </div>
  </wrap>
</template>
<script>
import base from './base'
import ListLoader from '../Public/Page/Attachment/ListLoader'

export default {
  components: {
    ListLoader,
  },

  extends: base,
}
</script>



 